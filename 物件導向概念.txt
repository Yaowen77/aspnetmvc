封裝
首先，封裝讓程式碼易於理解。我們可以從一個類別的名稱以及他的行為去理解與記憶它和系統之間的關係與責任，這樣的特性可以縮短日後我們重新檢視程式碼時所要花費的時間。

繼承
繼承讓程式碼可以重複使用。就以車子、汽車與卡車的例子來說吧。我們把大部分重複的程式碼寫在車子的類別裡，以後的十種汽車跟八種卡車都可以直接享用車子中已經定義好的程式碼與功能。我們因此縮短了浪費在重複性工作上的時間。

多型
多型讓程式易於擴充與維護。針對共通的介面來撰寫程式時，可以使得物件之間的關係被鬆綁，讓軟體在日後進行擴充或者個別物件修改時不需要更動到既有的程式

多載(Overload)指在一個類別(class)中，定義多個名稱相同，但參數(Parameter)不同的方法(Method)。

覆寫(Override)是指子類別可以覆寫父類別的方法內容，使該方法擁有不同於父類別的行為。

抽象